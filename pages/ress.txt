     let initiado = false

 const dibujar = async (values, Props, value) => {
        if (propsImage.imagen['xf_0']) {
            !initiado ? console.log(propsImage, parseInt(propsImage.heightY), parseInt(propsImage.widthX)) : null;
            initiado = true
            ctxE.clearRect(0, 0, canvasE.width, canvasE.height)
            ctxC.clearRect(0, 0, canvasC.width, canvasE.height)
            ctxD.clearRect(0, 0, canvasD.width, canvasD.height)
            ctx.clearRect(0, 0, canvas.width, canvas.height)
            let objeto2 = []
            let regleta = []
            let regletaNull = []
            propsImage.posX = 50
            propsImage.posY = 5
            let drawRegletaY = 1
            const puntosNulos = BodyXf()
            for (let i = 0; i < parseInt(propsImage.heightY)-1; i++) {
                let drawRegletaX = 1
                for (let index = 0; index < parseInt(propsImage.widthX); index++) {
                    const lugarNull = puntosNulos[i]
                    const element = {
                        posX: parseInt((index * 5) + propsImage.posX),
                        posY: parseInt(propsImage.posY + (i * 5)),
                        widthX: parseInt(propsImage.widthX * 5),
                        heightY: parseInt(propsImage.heightY * 5),
                        id: 766875875,
                    };
                    if (lugarNull.length === 3) {
                        if (((index < lugarNull[2][1]) && (index > lugarNull[2][0])) || index < lugarNull[0] || index > parseInt(propsImage.widthX) - lugarNull[1]) {
                            regletaNull.push(element)
                        }
                    } else
                        if (index < lugarNull[0] || index > parseInt(propsImage.widthX) - lugarNull[1]) {
                            regletaNull.push(element)
                        }
                    if (drawRegletaX === 5 && i === 0) {
                        regleta.push({ elemento: element, eje: 'X' })
                        drawRegletaX = 0
                    }
                    if (drawRegletaY === 5 && index === 0) {
                        regleta.push({ elemento: element, eje: 'Y' })
                        drawRegletaY = 0
                    }
                    drawRegletaX = drawRegletaX + 1
                    objeto2.push(element)
                }
                drawRegletaY = drawRegletaY + 1
            }
            ctxD.lineWidth = .2
            regleta.map((key, i) => {
                if (key.eje === 'X') {
                    ctxD.fillStyle = 'green'
                    ctxD.fillRect(key.elemento.posX, key.elemento.posY, 5, (propsImage.heightY * 5))

                } else {
                    ctxD.fillStyle = 'blue'
                    ctxD.fillRect(key.elemento.posX, key.elemento.posY, (propsImage.widthX * 5), 5)

                }
            })
            objeto2.map((key, i) => {
                ctxD.strokeRect(key.posX, key.posY, 5, 5)
            })
            regletaNull.map((key, i) => {
                ctxD.clearRect(key.posX, key.posY, 5, 5)
            })
            ctxC.drawImage(propsImage.imagen['xf_0'], 50, 5, (propsImage.widthX * 5), (propsImage.heightY * 5))

        } else {
            setTimeout(() => {
                dibujar()
            }, 5);
        }
    }
-
-
-
-
-
const dibujar = async (values, Props, value) => {
        const puntosNulos = JoshiXf()
        if (dibujarMalos.new.length > 0) {
            console.log(dibujarMalos.new, parseInt(dibujarMalos.new[0].heightY), parseInt(dibujarMalos.new[0].widthX));
            ctxE.clearRect(0, 0, canvasE.width, canvasE.height)
            ctxC.clearRect(0, 0, canvasC.width, canvasE.height)
            ctxD.clearRect(0, 0, canvasD.width, canvasD.height)
            ctx.clearRect(0, 0, canvas.width, canvas.height)
            let objeto2 = []
            let regleta = []
            let regletaNull = []
            dibujarMalos.new[0].posX = 50
            dibujarMalos.new[0].posY = 20
            let drawRegletaY = 1
            for (let i = 0; i < parseInt(dibujarMalos.new[0].heightY); i++) {
                let drawRegletaX = 1
                for (let index = 0; index < parseInt(dibujarMalos.new[0].widthX); index++) {
                    const lugarNull = puntosNulos[i]
                    console.log(lugarNull[0], lugarNull[1]);

                    const element = {
                        posX: parseInt((index * 5) + dibujarMalos.new[0].posX),
                        posY: parseInt(dibujarMalos.new[0].posY + (i * 5)),
                        widthX: parseInt(dibujarMalos.new[0].widthX * 5),
                        heightY: parseInt(dibujarMalos.new[0].heightY * 5),
                        id: dibujarMalos.new[0].id,
                    };
                    if (lugarNull.length === 3) {
                        if (((index < lugarNull[2][1]) && (index > lugarNull[2][0])) || index < lugarNull[0] || index > parseInt(dibujarMalos.new[0].widthX) - lugarNull[1]) {
                            regletaNull.push(element)
                        }
                    } else
                        if (index < lugarNull[0] || index > parseInt(dibujarMalos.new[0].widthX) - lugarNull[1]) {
                            regletaNull.push(element)
                        }
                    if (drawRegletaX === 5 && i === 0) {
                        regleta.push({ elemento: element, eje: 'X' })
                        drawRegletaX = 0
                    }
                    if (drawRegletaY === 5 && index === 0) {
                        regleta.push({ elemento: element, eje: 'Y' })
                        drawRegletaY = 0
                    }
                    drawRegletaX = drawRegletaX + 1
                    objeto2.push(element)
                }
                drawRegletaY = drawRegletaY + 1
            }
            ctxD.lineWidth = .2
            regleta.map((key, i) => {
                if (key.eje === 'X') {
                    ctxD.fillStyle = 'green'
                    ctxD.fillRect(key.elemento.posX, key.elemento.posY, 5, (dibujarMalos.new[0].heightY * 5))

                } else {
                    ctxD.fillStyle = 'blue'
                    ctxD.fillRect(key.elemento.posX, key.elemento.posY, (dibujarMalos.new[0].widthX * 5), 5)

                }
            })
            objeto2.map((key, i) => {
                ctxD.strokeRect(key.posX, key.posY, 5, 5)
            })
            regletaNull.map((key, i) => {
                ctxD.clearRect(key.posX, key.posY, 5, 5)
            })
            ctxE.drawImage(dibujarMalos.new[0].imagen[0].imagen, 50, 20, (dibujarMalos.new[0].widthX * 5), (dibujarMalos.new[0].heightY * 5))

        } else {
            setTimeout(() => {
                dibujar()
            }, 5);
        }
    }
/* 


/* 











 */
const dibujar = async (values, Props, value) => {
    const puntosNulos = BebeXf()
    proyectiles = []
    let imgUsed = proyectilesImg

    if (imgUsed[1] && imgUsed[1].naturalWidth) {
        proyectiles.push({
            id: `00-proy`,
            health: 22,
            hitdirection: 'xf',
            hitDamage: 0,
            state: 'live',
            imagen: imgUsed[1],
            type: 'prototype',
            posX: 50,
            posY: 20,
            widthX: parseInt(imgUsed[1].naturalWidth / 30),
            heightY: parseInt(imgUsed[1].naturalHeight / 30),
            direccion: 'xb',
            speed: 0,
            efectDirection: 'down',
            damage: 0,
        })
        console.log(proyectiles, parseInt(proyectiles[0].heightY), parseInt(proyectiles[0].widthX));
        ctxE.clearRect(0, 0, canvasE.width, canvasE.height)
        ctxC.clearRect(0, 0, canvasC.width, canvasE.height)
        ctxD.clearRect(0, 0, canvasD.width, canvasD.height)
        ctx.clearRect(0, 0, canvas.width, canvas.height)
        let objeto2 = []
        let regleta = []
        let regletaNull = []
        proyectiles[0].posX = 50
        proyectiles[0].posY = 20
        let drawRegletaY = 1
        for (let i = 0; i < parseInt(proyectiles[0].heightY); i++) {
            let drawRegletaX = 1
            for (let index = 0; index < parseInt(proyectiles[0].widthX); index++) {
                const lugarNull = puntosNulos[i]
                console.log(lugarNull[0], lugarNull[1]);

                const element = {
                    posX: parseInt((index * 5) + proyectiles[0].posX),
                    posY: parseInt(proyectiles[0].posY + (i * 5)),
                    widthX: parseInt(proyectiles[0].widthX * 5),
                    heightY: parseInt(proyectiles[0].heightY * 5),
                    id: proyectiles[0].id,
                };
                if (lugarNull.length === 3) {
                    if (((index < lugarNull[2][1]) && (index > lugarNull[2][0])) || index < lugarNull[0] || index > parseInt(proyectiles[0].widthX) - lugarNull[1]) {
                        regletaNull.push(element)
                    }
                } else
                    if (index < lugarNull[0] || index > parseInt(proyectiles[0].widthX) - lugarNull[1]) {
                        regletaNull.push(element)
                    }
                if (drawRegletaX === 5 && i === 0) {
                    regleta.push({ elemento: element, eje: 'X' })
                    drawRegletaX = 0
                }
                if (drawRegletaY === 5 && index === 0) {
                    regleta.push({ elemento: element, eje: 'Y' })
                    drawRegletaY = 0
                }
                drawRegletaX = drawRegletaX + 1
                objeto2.push(element)
            }
            drawRegletaY = drawRegletaY + 1
        }
        ctxD.lineWidth = .2
        regleta.map((key, i) => {
            if (key.eje === 'X') {
                ctxD.fillStyle = 'green'
                ctxD.fillRect(key.elemento.posX, key.elemento.posY, 5, (proyectiles[0].heightY * 5))

            } else {
                ctxD.fillStyle = 'blue'
                ctxD.fillRect(key.elemento.posX, key.elemento.posY, (proyectiles[0].widthX * 5), 5)

            }
        })
        objeto2.map((key, i) => {
            ctxD.strokeRect(key.posX, key.posY, 5, 5)
        })
        regletaNull.map((key, i) => {
            ctxD.clearRect(key.posX, key.posY, 5, 5)
        })
        ctxD.drawImage(proyectiles[0].imagen, 50, 20, (proyectiles[0].widthX * 5), (proyectiles[0].heightY * 5))

    } else {
        setTimeout(() => {
            dibujar()
        }, 5);
    }
}





 */
const dibujar = async (values, Props, value) => {
    const puntosNulos = BodyXf()
    if (propsImage.imagen.xf_1) {
        console.log(propsImage.imagen['xf_1']);
        ctxE.clearRect(0, 0, canvasE.width, canvasE.height)
        ctxC.clearRect(0, 0, canvasC.width, canvasE.height)
        ctxD.clearRect(0, 0, canvasD.width, canvasD.height)
        ctx.clearRect(0, 0, canvas.width, canvas.height)
        let objeto2 = []
        let regleta = []
        let regletaNull = []
        propsImage.posX = 50
        propsImage.posY = 20
        let drawRegletaY = 1
        console.log(parseInt(propsImage.heightY), parseInt(propsImage.widthX));
        for (let i = 0; i < parseInt(propsImage.heightY); i++) {
            let drawRegletaX = 1
            for (let index = 0; index < parseInt(propsImage.widthX); index++) {
                const lugarNull = puntosNulos[i]
                console.log(lugarNull[0], lugarNull[1]);

                const element = {
                    posX: parseInt((index * 5) + propsImage.posX),
                    posY: parseInt(propsImage.posY + (i * 5)),
                    widthX: parseInt(propsImage.widthX * 5),
                    heightY: parseInt(propsImage.heightY * 5),
                    id: propsImage.id,
                };
                if (lugarNull.length === 3) {
                    if (((index < lugarNull[2][1]) && (index > lugarNull[2][0])) || index < lugarNull[0] || index > parseInt(propsImage.widthX) - lugarNull[1]) {
                        regletaNull.push(element)
                    }
                } else
                    if (index < lugarNull[0] || index > parseInt(propsImage.widthX) - lugarNull[1]) {
                        regletaNull.push(element)
                    }
                if (drawRegletaX === 5 && i === 0) {
                    regleta.push({ elemento: element, eje: 'X' })
                    drawRegletaX = 0
                }
                if (drawRegletaY === 5 && index === 0) {
                    regleta.push({ elemento: element, eje: 'Y' })
                    drawRegletaY = 0
                }
                drawRegletaX = drawRegletaX + 1
                objeto2.push(element)
            }
            drawRegletaY = drawRegletaY + 1
        }
        ctxD.lineWidth = .2
        regleta.map((key, i) => {
            if (key.eje === 'X') {
                ctxD.fillStyle = 'green'
                ctxD.fillRect(key.elemento.posX, key.elemento.posY, 5, (propsImage.heightY * 5))

            } else {
                ctxD.fillStyle = 'blue'
                ctxD.fillRect(key.elemento.posX, key.elemento.posY, (propsImage.widthX * 5), 5)

            }
        })
        objeto2.map((key, i) => {
            ctxD.strokeRect(key.posX, key.posY, 5, 5)
        })
        regletaNull.map((key, i) => {
            ctxD.clearRect(key.posX, key.posY, 5, 5)
        })
        ctxD.drawImage(propsImage.imagen.xf_1, 50, 20, (propsImage.widthX * 5), (propsImage.heightY * 5))

    } else {
        setTimeout(() => {
            dibujar()
        }, 5);
    }
}





























const dibujar = async (values, Props, value) => {
    const puntosNulos = SierraXf()
    if (obst.length > 0 && obst[1]) {
        console.log(obst[1]);
        let obstt = [{
            id: `0-obst`,
            displayneed: true,
            layerOnDisplay: 0,
            randomNumber: 0,
            damage: 0,
            imagen: obst[1],
            type: 'obj',
            posX: 50,
            class: 'motosierra',
            posY: 20,
            widthX: parseInt(obst[1].naturalWidth / 14),
            heightY: parseInt(obst[1].naturalWidth / 14),
        }]
        console.log(obstt, parseInt(obstt[0].heightY), parseInt(obstt[0].widthX));
        ctxE.clearRect(0, 0, canvasE.width, canvasE.height)
        ctxC.clearRect(0, 0, canvasC.width, canvasE.height)
        ctxD.clearRect(0, 0, canvasD.width, canvasD.height)
        ctx.clearRect(0, 0, canvas.width, canvas.height)
        let objeto2 = []
        let regleta = []
        let regletaNull = []
        obstt[0].posX = 50
        obstt[0].posY = 20
        let drawRegletaY = 1
        for (let i = 0; i < parseInt(obstt[0].heightY); i++) {
            let drawRegletaX = 1
            for (let index = 0; index < parseInt(obstt[0].widthX); index++) {
                const lugarNull = puntosNulos[i]
                console.log(lugarNull[0], lugarNull[1]);

                const element = {
                    posX: parseInt((index * 5) + obstt[0].posX),
                    posY: parseInt(obstt[0].posY + (i * 5)),
                    widthX: parseInt(obstt[0].widthX * 5),
                    heightY: parseInt(obstt[0].heightY * 5),
                    id: obstt[0].id,
                };
                if (lugarNull.length === 3) {
                    if (((index < lugarNull[2][1]) && (index > lugarNull[2][0])) || index < lugarNull[0] || index > parseInt(obstt[0].widthX) - lugarNull[1]) {
                        regletaNull.push(element)
                    }
                } else
                    if (index < lugarNull[0] || index > parseInt(obstt[0].widthX) - lugarNull[1]) {
                        regletaNull.push(element)
                    }
                if (drawRegletaX === 5 && i === 0) {
                    regleta.push({ elemento: element, eje: 'X' })
                    drawRegletaX = 0
                }
                if (drawRegletaY === 5 && index === 0) {
                    regleta.push({ elemento: element, eje: 'Y' })
                    drawRegletaY = 0
                }
                drawRegletaX = drawRegletaX + 1
                objeto2.push(element)
            }
            drawRegletaY = drawRegletaY + 1
        }
        ctxD.lineWidth = .2
        regleta.map((key, i) => {
            if (key.eje === 'X') {
                ctxD.fillStyle = 'green'
                ctxD.fillRect(key.elemento.posX, key.elemento.posY, 5, (obstt[0].heightY * 5))

            } else {
                ctxD.fillStyle = 'blue'
                ctxD.fillRect(key.elemento.posX, key.elemento.posY, (obstt[0].widthX * 5), 5)

            }
        })
        objeto2.map((key, i) => {
            ctxD.strokeRect(key.posX, key.posY, 5, 5)
        })
        regletaNull.map((key, i) => {
            ctxD.clearRect(key.posX, key.posY, 5, 5)
        })
        ctxE.drawImage(obstt[0].imagen, 50, 20, (obstt[0].widthX * 5), (obstt[0].heightY * 5))

    } else {
        setTimeout(() => {
            dibujar()
        }, 5);
    }
}


-
-
-
-
--

-
-
-
-import BebeXf, { BebeXb } from "./prototiposSprites/protoBaby";
import BodyXf, { BodyXb, BodyXs } from "./prototiposSprites/protoBody";
import JoshiXf, { JoshiXb } from "./prototiposSprites/protoJoshi";
import ProtoPlataforma from "./prototiposSprites/protoPlataforma";
import SierraXf, { CactusXf } from "./prototiposSprites/protoSierra";

const Colisonador = (Objeto1, Objeto2, Objeto3, aux, comprobe, ctx, type) => {
    let objeto1 = []
    let bodyEmpty = []
    let empty = false
    let choko = false
    let keyCopied
    let maloCopied
    let returns = { array: [], state: false }
    if (type === 'plataforma') {
        let objetoPlataforma = []
        /*  for (let index = 0; index < Objeto3.widthX; index++) {
             const element = {
                 posX: Objeto3.items[0].posX + index,
                 posY: Objeto3.posY,
                 widthX: Objeto3.widthX,
                 heightY: Objeto3.heightY,
                 id: `cabeza-${index}`,
                 pos: index
             };
             const element2 = {
                 posX: Objeto3.items[0].posX + index,
                 posY: Objeto3.posY + parseInt(Objeto3.heightY),
                 widthX: Objeto3.widthX,
                 heightY: Objeto3.heightY,
                 id: `pies-${index}`,
                 pos: index
             };
             objeto1.push(element)
             objeto1.push(element2)
         } */
        let objetoPlataformaAux = []
        Objeto2.map((key, iss) => {
            objetoPlataformaAux.push(key)
        })
        objetoPlataformaAux.map((key, iss) => {
            if ((Objeto3.items[0].posX + Objeto3.widthX > key.posX && Objeto3.items[0].posX < key.posX) ||
                Objeto3.items[0].posX < key.posX + key.widthX && Objeto3.items[0].posX > key.posX) {
                key.falses.map((key2, i2) => {
                    objetoPlataforma.push(key2)
                })
            }
        })
        const puntosNulosBody = Objeto3.direccion === 'xf' ? BodyXf() : Objeto3.direccion === 'xb' ? BodyXb() : BodyXf()
        for (let i = 0; i < parseInt(Objeto3.heightY); i++) {
            const bodyNull = puntosNulosBody[i]
            for (let index = 0; index < parseInt(Objeto3.widthX); index++) {
                const element = {
                    colisionaEn: i === 0 || i === parseInt(Objeto3.heightY) - 1 ? 'y' : 'x',
                    posX: parseInt(index + Objeto1.posX),
                    posY: parseInt(Objeto3.posY + i),
                    id: 'player',
                    pos: 'player',
                    widthX: parseInt(Objeto3.widthX),
                    heightY: parseInt(Objeto3.heightY),
                };
                if (bodyNull.length === 3) {
                    if (((index < bodyNull[2][1]) && (index > bodyNull[2][0])) || index < bodyNull[0] || index > parseInt(Objeto3.widthX) - bodyNull[1]) {
                        bodyEmpty.push(element)
                    } else {
                        objeto1.push(element)
                    }
                } else
                    if (index < bodyNull[0] || index > parseInt(Objeto3.widthX) - bodyNull[1]) {
                        bodyEmpty.push(element)
                    } else {
                        objeto1.push(element)
                    }
            }
        }

        objeto1.map((key) => {
            objetoPlataforma.map((key2, iMalos) => {
                if ((key2.posX) === key.posX && key2.posY === key.posY && !choko) {
                    choko = true
                    returns.array.push({ a: key, b: key2 })
                }
            })
        })
        if (choko) {
            returns.state = false
            let point = (returns.array[0].b.colision).split('-')
            if (point[0] === 'y') {
                if (returns.array[0].a.colisionaEn === 'y') {
                    returns.state = true
                }
            }
            if (point[0] === 'x') {
                returns.state = true
            }
            return (returns)
        } else {
            returns.state = false
            return (returns)
        }
    } else
        if (aux) {
            if (Objeto3.direccion === 'xd') {
                for (let i = parseInt(Objeto3.heightY / 2); i < Objeto3.heightY; i++) {
                    for (let index = 0; index < Objeto3.widthX; index++) {
                        const element = {
                            posX: parseInt(index + Objeto1.posX),
                            posY: parseInt(Objeto3.posY + i) + parseInt(Objeto3.heightY / 2),
                            id: 'player',
                            pos: 'player'
                        };
                        objeto1.push(element)
                    }
                }
            } else {
                const puntosNulosBody = Objeto3.direccion === 'xf' ? BodyXf() : Objeto3.direccion === 'xb' ? BodyXb() : BodyXf()
                for (let i = 0; i < puntosNulosBody.length; i++) {
                    const bodyNull = puntosNulosBody[i]
                    for (let index = 0; index < parseInt(Objeto3.widthX); index++) {
                        const element = {
                            posX: parseInt(index + Objeto1.posX),
                            posY: parseInt(Objeto3.posY + i),
                            id: 'player',
                            pos: 'player'
                        };
                        if (bodyNull.length === 3) {
                            if (((index < bodyNull[2][1]) && (index > bodyNull[2][0])) || index < bodyNull[0] || index > parseInt(Objeto3.widthX) - bodyNull[1]) {
                                bodyEmpty.push(element)
                            } else {
                                objeto1.push(element)
                            }
                        } else
                            if (index < bodyNull[0] || index > parseInt(Objeto3.widthX) - bodyNull[1]) {
                                bodyEmpty.push(element)
                            } else {
                                objeto1.push(element)
                            }
                    }
                }
            }

        } else {
            Objeto1.map((key, iss) => {
                for (let i = 0; i < parseInt(key.heightY); i++) {
                    for (let index = 0; index < parseInt(key.widthX); index++) {
                        const element = {
                            posX: parseInt(index + key.posX),
                            posY: parseInt(key.posY + i),
                            id: key.id,
                            pos: iss
                        };
                        objeto1.push(element)
                    }
                }
            })
        }
    let objeto2 = []
    let regletaNull = []
    if (comprobe) {
        console.log(Objeto2, type);
        const puntosNulos = type === 'malo' ? (Objeto2[0].canMove.direccion === 'xf' ? JoshiXf() : JoshiXb()) : type === 'proy' ?
            (Objeto2[0].direccion === 'xf' ? BebeXf() : BebeXb()) : type === 'obstA' ? CactusXf() : SierraXf();
        Objeto2.map((key, iss) => {
            for (let i = 0; i < puntosNulos.length; i++) {
                const lugarNull = puntosNulos[i]
                for (let index = 0; index < parseInt(key.widthX); index++) {
                    const element = {
                        posX: parseInt(index + key.posX),
                        posY: parseInt(key.posY + i),
                        id: key.id,
                        pos: iss
                    };
                    if (lugarNull.length === 3) {
                        if (((index < lugarNull[2][1]) && (index > lugarNull[2][0])) || index < lugarNull[0] || index > parseInt(key.widthX) - lugarNull[1]) {
                            regletaNull.push(element)
                        } else {
                            objeto2.push(element)

                        }
                    } else
                        if (index < lugarNull[0] || index > parseInt(key.widthX) - lugarNull[1]) {
                            regletaNull.push(element)
                        } else {
                            objeto2.push(element)
                        }
                }
            }
        })
    } else {
        Objeto2.map((key, iss) => {
            for (let i = 0; i < key.heightY; i++) {
                for (let index = 0; index < key.widthX; index++) {
                    const element = {
                        posX: parseInt(index + key.posX),
                        posY: parseInt(key.posY + i),
                        id: key.id,
                        pos: iss
                    };
                    objeto2.push(element)
                }
            }
        })
    }


    /* objeto1.map((key) => {
        regletaNull.map((key2, iMalos) => {
            if (key2.posX === key.posX && key2.posY === key.posY && !empty) {
                empty = true
                keyCopied = key
                maloCopied = key2
                ctx.fillStyle = "#ff2626"; // Color rojo
                ctx.beginPath(); // Iniciar trazo
                ctx.arc(key2.posX, key2.posY, 1, 0, Math.PI * 2, true); // Dibujar un punto usando la funcion arc
                ctx.fill();
            }
        })
    }) */
    if (!empty && comprobe) {
        objeto1.map((key) => {
            objeto2.map((key2, iMalos) => {
                if (key2.state !== 'die' && key2.state !== 'spirit' && key2.state !== 'onDie' && parseInt(key2.posX) === parseInt(key.posX) && parseInt(key2.posY) === parseInt(key.posY) && !empty) {
                    choko = true
                    empty = true
                    returns.state = true
                    returns.array.push({ a: key, b: key2 })
                    /*  ctx.fillStyle = "#ff2626";
                     ctx.beginPath();
                     ctx.arc(key2.posX, key2.posY, 2.5, 0, Math.PI * 2, true); 
                     ctx.fill(); */
                }
            })
        })
    } else {
        objeto1.map((key) => {
            objeto2.map((key2, iMalos) => {
                if (key2.posX === key.posX && key2.posY === key.posY) {
                    choko = true
                    keyCopied = key
                }
            })
        })
    }
    if (comprobe) {
        if (empty) {
            return (returns)
        } else {
            returns.state = false
            return (returns)
        }
    }
    else
        if (choko) {
            if (aux) {
                return ({ pos: maloCopied.pos, choke: true, empty: false })

            } else {
                return ({ pos: keyCopied.pos, choke: true })
            }

        } else {
            return ({ pos: NaN, i: NaN, choke: false, empty: false })

        }

}
export default Colisonador








