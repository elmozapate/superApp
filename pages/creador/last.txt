<body>
{
    !requesti ?
        <>
            {
                text === 'dio bien' || text === 'Ya existe' ? <><h1>{text}</h1>
                    <button onClick={(e) => { e.preventDefault(); reboot() }}>Crear Otra
                    </button></> : <h1>{text}</h1>
            }

        </>
        : <>{
            !requestingType ? <>
                <input
                    id='name'
                    value={texto.name}
                    onChange={handleLogin}></input>
                <input
                    id='logo'
                    value={texto.logo}
                    onChange={handleLogin}></input>
                <button onClick={(e) => { e.preventDefault(); sended() }}>Enviar</button>
            </> :
                <>
                    <select name="color" id="color" defaultValue='negro' onChange={handleLogin}>
                        <option value="negro">negro</option>
                        <option value="rojo">rojo</option>
                        <option value="azul">azul</option>
                        <option value="verde">verde</option>
                    </select>
                    <p>Tambien agrega las secciones que quieras</p>
                    {!newItem ?
                        <button
                            onClick={(e) => { e.preventDefault(); newSection() }}
                        >Agregar Nueva Seccion</button> : null}
                    {
                        arrayInWait.map((key, i) => {
                            return (
                                <>
                                    {key.valueIn === 'ocupado' ? <li>{key.name}</li> : null}

                                </>
                            )
                        })
                    }
                    {newItem ? <>
                        <input
                            placeholder='Nombre de la seccion'
                            id='sectionNew'
                            value={texto.sectionNew}
                            onChange={handleLogin}></input>
                        <textarea
                            id='sectionNewDescription'
                            value={texto.sectionNewDescription}
                            rows='8'
                            onChange={handleLogin}
                            placeholder='agrege una descripcion'></textarea>
                        {<>
                            {!newItemComerceReady ? <>
                                <Checkbox
                                    id={`comerce`} onChange={handleLogin} checked={texto.comerce}>
                                    Es una seccion de productos galeria</Checkbox>
                                {texto.comerce ? <>'ingresa productos'
                                    <button onClick={(e) => { e.preventDefault(); sended3() }}>Subir Archivos</button>
                                </> : null}
                                <button
                                    onClick={(e) => { e.preventDefault(); sendSection() }}
                                >

                                    Guardar
                                </button> </> : null}</>}

                    </> : null}
                    {
                        !newItemComerceReady && ready ? 'archiso subidos correctamente' : null
                    }
                    <button onClick={(e) => { e.preventDefault(); sended2() }}>Enviar</button>
                    {
                        newItemComerce ? <>
                            <CrearProductos funtions={sendProducts}>

                            </CrearProductos>
                        </> : null
                    }
                </>
        }</>}
</body>
 const sending2 = (i, data, col, row, pos, typeBox = 'contenedor', textvalue = '') => {
        if (data.stage === 3) {
                let vec = createdSections
        const itemsArray = []
        const lastArray = createdSections.array
        let many = createdSections.components
        for (let index = 0; index < i; index++) {
            const newItem = {
                
                fatherId: pos,
                position: many + index + 1,
                basePosition: index,
                stage: 3,
                fatherbaseSection: data.value.fatherbaseSection,
                fatherbaseSubSection: data.value.fatherbaseSubSection,
                type: typeBox === 'contenedor' ? 'contenedor' : typeBox,
                column: true,
                bgColor: typeBox === 'contenedor' ? 'transparent' : typeBox === 'text' ? 'white' : 'green',
                margins: false,
                aditionalCss: ' ' + typeBox === 'contenedor' ? 'min-hbox  ' : '',
                especificWidth: true,
                width: i === 1 ? 100 : i === 2 ? 50 : 33,
                baseWidth: i === 1 ? 100 : i === 2 ? 50 : 33,
                text: typeBox === 'contenedor' ? '' : typeBox === 'text' || typeBox === 'img' ? textvalue : typeBox,
                zIndex: true,
                zIndexValue: 50,
                color: 'black',
                childrenContain: false,
                children: []
            }
            itemsArray.push(newItem)
            
        }
                let containing = false
        if (typeBox === 'bgColor') {
            vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].
                bgColor = textvalue
        } else {
            containing = true
            vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].column = typeBox === 'contenedor' ? false : true
            vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].childrenContain = true
            if (typeBox === 'contenedor') {
                vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].children = itemsArray
            } else {
                const use = createdSections.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].children
                use.push(itemsArray)
                vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].children = use

            }
        }
        setcreatedSections({
            components: createdSections.components + i,
            contain: containing,
            array: vec.array
        })


    } else {
        /* hasta aca el 3 */
        
        let vec = createdSections
        const itemsArray = []
        const lastArray = createdSections.array
        let many = createdSections.components
        for (let index = 0; index < i; index++) {
            const newItem = {
                fatherId: pos,
                position: many + index + 1,
                basePosition: index,
                stage: 3,
                fatherbaseSection: vec.array[data.editSectionNumber][data.i].fatherbaseSection,
                fatherbaseSubSection: vec.array[data.editSectionNumber][data.i].fatherbaseSubSection,
                type: typeBox === 'contenedor' ? 'contenedor' : typeBox,
                column: true,
                bgColor: typeBox === 'contenedor' ? 'white' : typeBox === 'text' ? 'white' : 'green',
                margins: false,
                aditionalCss: `${typeBox === 'contenedor' ? 'min-hbox  ' : ''}`,
                especificWidth: true,
                width: i === 1 ? 100 : i === 2 ? 50 : 33,
                baseWidth: i === 1 ? 100 : i === 2 ? 50 : 33,
                text: typeBox === 'contenedor' ? '' : typeBox === 'text' || typeBox === 'img' ? textvalue : typeBox,
                zIndex: true,
                zIndexValue: 50,
                color: 'black',
                childrenContain: false,
                children: []
            }
            itemsArray.push(newItem)
            
        }

        let newSec = {
            contain: true,
            array: itemsArray
        }
        let containing = false
        if (typeBox === 'bgColor' || (typeBox.split('%')[1] && typeBox.split('%')[0] === "styles")) {

            if (typeBox === 'bgColor') {
                vec.array[data.editSectionNumber][data.i].bgColor = textvalue
            }
            if (typeBox.split('%')[0] === "styles") {
                                if (typeBox.split('%')[1] === "wdt-") {
                    let sizeMax = vec.array[data.editSectionNumber][data.i].especificWidth ? vec.array[data.editSectionNumber][data.i].baseWidth : 100
                    let marginNumber = parseInt(((sizeMax / 100) * textvalue).toFixed())

                    vec.array[data.editSectionNumber][data.i].width = marginNumber
                    if (marginNumber < vec.array[data.editSectionNumber][data.i].baseWidth) {
                        
                        if (vec.array[data.editSectionNumber][data.i].margins === false) {
                            
                            vec.array[data.editSectionNumber][data.i].margins = 'mr-' + vec.array[data.editSectionNumber][data.i].baseWidth - marginNumber + ' '
                        } else {
                                                        vec.array[data.editSectionNumber][data.i].margins = 'mr-' + vec.array[data.editSectionNumber][data.i].baseWidth - marginNumber + ' '

                        }
                    }
                    vec.array[data.editSectionNumber][data.i].especificWidth = true
                } else {
                    if (vec.array[data.editSectionNumber][data.i].aditionalCss === false) {
                        vec.array[data.editSectionNumber][data.i].aditionalCss = typeBox.split('%')[1] + textvalue + ' '
                    } else {
                        vec.array[data.editSectionNumber][data.i].aditionalCss = "." + vec.array[data.editSectionNumber][data.i].aditionalCss + typeBox.split('%')[1] + textvalue + ' '
                    }
                }
            }
        } else {
            containing = true
            if (vec.array[data.editSectionNumber][data.i].childrenContain) {
                let olds = []
                olds = vec.array[data.editSectionNumber][data.i].children
                olds.push(itemsArray[0])
                vec.array[data.editSectionNumber][data.i].column = true
                vec.array[data.editSectionNumber][data.i].children = olds
            } else {
                vec.array[data.editSectionNumber][data.i].childrenContain = true
                vec.array[data.editSectionNumber][data.i].children = (newSec.array)
            }
        }
        if (data.stage === 2) {
            setcreatedSections({
                components: createdSections.components + i,
                contain: containing,
                array: vec.array
            })
        }
    }


}


+
+
+
+
+

let NewcreatedSections = {
    components: createdSections.components,
    contain: false,
    array: [],
    oldArray:createdSections.oldArray
}

if (data.stage === 3) {
    let vec = createdSections
    const itemsArray = []
    const lastArray = createdSections.array
    let many = createdSections.components
    for (let index = 0; index < i; index++) {
        const newItem = {
            newSection: false,
            fatherId: pos,
            position: many + index + 1,
            basePosition: index,
            stage: 3,
            fatherbaseSection: data.value.fatherbaseSection,
            fatherbaseSubSection: data.value.fatherbaseSubSection,
            type: typeBox === 'contenedor' ? 'contenedor' : typeBox,
            column: true,
            bgColor: typeBox === 'contenedor' ? 'transparent' : typeBox === 'text' ? 'white' : 'green',
            margins: false,
            aditionalCss: ' ' + typeBox === 'contenedor' ? 'min-hbox  ' : '',
            especificWidth: true,
            width: i === 1 ? 100 : i === 2 ? 50 : 33,
            baseWidth: i === 1 ? 100 : i === 2 ? 50 : 33,
            text: typeBox === 'contenedor' ? '' : typeBox === 'text' || typeBox === 'img' ? textvalue : typeBox,
            zIndex: true,
            zIndexValue: 50,
            color: 'black',
            childrenContain: false,
            children: []
        }
        itemsArray.push(newItem)

    }
    let containing = false
    if (typeBox === 'bgColor') {
        vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].
            bgColor = textvalue
    } else {
        containing = true
        vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].column = typeBox === 'contenedor' ? false : true
        vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].childrenContain = true
        if (typeBox === 'contenedor') {
            vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].children = itemsArray
        } else {
            const use = createdSections.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].children
            use.push(itemsArray)
            vec.array[data.value.fatherbaseSection - 1][data.value.fatherbaseSubSection].children[data.value.basePosition].children = use

        }
    }
    NewcreatedSections = ({
        components: createdSections.components + i,
        contain: containing,
        array: vec.array,
        oldArray:createdSections.oldArray

    })


} else {
    /* hasta aca el 3 */

    let vec = createdSections
    const itemsArray = []
    const lastArray = createdSections.array
    let many = createdSections.components
    for (let index = 0; index < i; index++) {
        const newItem = {
            newSection: false,
            fatherId: pos,
            position: many + index + 1,
            basePosition: index,
            stage: 3,
            fatherbaseSection: vec.array[data.editSectionNumber][data.i].fatherbaseSection,
            fatherbaseSubSection: vec.array[data.editSectionNumber][data.i].fatherbaseSubSection,
            type: typeBox === 'contenedor' ? 'contenedor' : typeBox,
            column: true,
            bgColor: typeBox === 'contenedor' ? 'white' : typeBox === 'text' ? 'white' : 'green',
            margins: false,
            aditionalCss: `${typeBox === 'contenedor' ? 'min-hbox  ' : ''}`,
            especificWidth: true,
            width: i === 1 ? 100 : i === 2 ? 50 : 33,
            baseWidth: i === 1 ? 100 : i === 2 ? 50 : 33,
            text: typeBox === 'contenedor' ? '' : typeBox === 'text' || typeBox === 'img' ? textvalue : typeBox,
            zIndex: true,
            zIndexValue: 50,
            color: 'black',
            childrenContain: false,
            children: []
        }
        itemsArray.push(newItem)

    }

    let newSec = {
        contain: true,
        array: itemsArray
    }
    let containing = false
    if (typeBox === 'bgColor' || (typeBox.split('%')[1] && typeBox.split('%')[0] === "styles")) {

        if (typeBox === 'bgColor') {
            vec.array[data.editSectionNumber][data.i].bgColor = textvalue
        }
        if (typeBox.split('%')[0] === "styles") {
            if (typeBox.split('%')[1] === "wdt-") {
                let sizeMax = vec.array[data.editSectionNumber][data.i].especificWidth ? vec.array[data.editSectionNumber][data.i].baseWidth : 100
                let marginNumber = parseInt(((sizeMax / 100) * textvalue).toFixed())

                vec.array[data.editSectionNumber][data.i].width = marginNumber
                if (marginNumber < vec.array[data.editSectionNumber][data.i].baseWidth) {

                    if (vec.array[data.editSectionNumber][data.i].margins === false) {

                        vec.array[data.editSectionNumber][data.i].margins = 'mr-' + vec.array[data.editSectionNumber][data.i].baseWidth - marginNumber + ' '
                    } else {
                        vec.array[data.editSectionNumber][data.i].margins = 'mr-' + vec.array[data.editSectionNumber][data.i].baseWidth - marginNumber + ' '

                    }
                }
                vec.array[data.editSectionNumber][data.i].especificWidth = true
            } else {
                if (vec.array[data.editSectionNumber][data.i].aditionalCss === false) {
                    vec.array[data.editSectionNumber][data.i].aditionalCss = typeBox.split('%')[1] + textvalue + ' '
                } else {
                    vec.array[data.editSectionNumber][data.i].aditionalCss = "." + vec.array[data.editSectionNumber][data.i].aditionalCss + typeBox.split('%')[1] + textvalue + ' '
                }
            }
        }
    } else {
        containing = true
        if (vec.array[data.editSectionNumber][data.i].childrenContain) {
            let olds = []
            olds = vec.array[data.editSectionNumber][data.i].children
            olds.push(itemsArray[0])
            vec.array[data.editSectionNumber][data.i].column = true
            vec.array[data.editSectionNumber][data.i].children = olds
        } else {
            vec.array[data.editSectionNumber][data.i].childrenContain = true
            vec.array[data.editSectionNumber][data.i].children = (newSec.array)
        }
    }
    if (data.stage === 2) {
        NewcreatedSections = ({
            components: createdSections.components + i,
            contain: containing,
            array: vec.array,
            oldArray:createdSections.oldArray
        })
    }
}
return NewcreatedSections